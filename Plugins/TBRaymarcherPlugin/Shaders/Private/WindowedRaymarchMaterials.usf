
#include "RaymarchMaterialCommon.usf"
#include "WindowedSampling.usf"

int3 GetVolumeLoadingDimensions(Texture3D Volume)
{
    int x, y, z;
    Volume.GetDimensions(x, y, z);
    // Decrease dimensions by 1, because with any UVW coord being == 1, we would load one after the array length
    // E.G - with X dimension == 2, U == 1, we want to sample x[1], not x[2] (as that doesn't exist)
    return int3(x - 1, y - 1, z - 1);
}

// Performs one raymarch step and accumulates the result to the existing Accumulated Light Energy.
// Notice "Material.Clamp_WorldGroupSettings" used as a sampler. These are UE shared samplers.
void AccumulateWindowedRaymarchStep(inout float4 AccumulatedLightEnergy, float3 CurPos, Texture3D DataVolume, SamplerState DataVolumeSampler,
                                 Texture2D TF, Texture3D LightVolume, float StepSize,
                                 float4 WindowingParams)
{
    // Sample intensity from the volume and get corresponding color-opacity from transfer function.
    //int3 VolumeDims = GetVolumeLoadingDimensions(DataVolume);
    //int3 LoadingSpot = int3(round(VolumeDims * saturate(CurPos)));

    float4 ColorSample = SampleWindowedVolumeStep(CurPos, StepSize, DataVolume, DataVolumeSampler,
                                               TF, Material.Clamp_WorldGroupSettings, WindowingParams);
    
    // Get lighting information from illumination volume for current position and
    // Multiply sampled color with light color to adjust intensity according to light strength.
    ColorSample.rgb = ColorSample.rgb * LightVolume.SampleLevel(Material.Clamp_WorldGroupSettings, saturate(CurPos), 0).r;
        // Accumulate current colored sample to the final values.
    AccumulateLightEnergy(AccumulatedLightEnergy, ColorSample);
}

// Performs lit raymarch for the current pixel. The lighting information is taken from a precomputed light volume.
float4 PerformWindowedLitRaymarch(Texture3D DataVolume, // Data Volume 
                              SamplerState DataVolumeSampler,
                              Texture2D TF, // Transfer func and intensity domain modifier
                              Texture3D LightVolume, // Light Volume  
                              float3 CurPos, float MaxSteps, float StepSize, float FinalStep, // Position of ray entry to cube, number of steps, size of a step and a 0-1 value of how big the final step is compared to regular steps 
                              float3 ClippingCenter, float3 ClippingDirection, // Clipping plane position and direction of clipped away region
                              float4 WindowingParams,
                              FMaterialPixelParameters MaterialParameters)                      // Material Parameters
{
// Get camera vector in local space and multiply it by step size.
    float3 LocalCamVec = -normalize(mul(MaterialParameters.CameraVector, GetPrimitiveData(MaterialParameters.PrimitiveId).WorldToLocal)) * StepSize;
    // Get step size in world units to be consistent with compute shaders' opacity calculations.
    float StepSizeWorld = length(mul(LocalCamVec, GetPrimitiveData(MaterialParameters.PrimitiveId).LocalToWorld));
    // Initialize accumulated light energy.
    float4 LightEnergy = 0;
    // Jitter Entry position to avoid artifacts.
    JitterEntryPos(CurPos, LocalCamVec, MaterialParameters);
   
    int i = 0;
    for (i = 0; i < MaxSteps; i++)
    {
        CurPos += LocalCamVec; // Because we jitter only "against" the direction of LocalCamVec, start marching before first sample.
	    // Any position that is clipped by the clipping plane shall be ignored.
        if (!IsCurPosClipped(CurPos, ClippingCenter, ClippingDirection))
        {
            AccumulateWindowedRaymarchStep(LightEnergy, CurPos, DataVolume, DataVolumeSampler,
            TF, LightVolume, StepSizeWorld, WindowingParams);

            // Exit early if light energy (opacity) is already very high (so future steps would have almost no impact on color).
            if (LightEnergy.a > 0.95f)
            {
                LightEnergy.a = 1.0f;
                break;
            };
        }
    }

    // Handle FinalStep (only if we went through all the previous steps and the final step size is above zero)
    if (i == MaxSteps && FinalStep > 0.0f)
    {
        CurPos += LocalCamVec * (FinalStep);
        // If the final step is clipped, don't do anything.
        if (!IsCurPosClipped(CurPos, ClippingCenter, ClippingDirection))
        {
            AccumulateWindowedRaymarchStep(LightEnergy, CurPos, DataVolume, DataVolumeSampler,
            TF, LightVolume, StepSizeWorld * FinalStep, WindowingParams);
        }
    }

    return LightEnergy;
}


// Performs lit raymarch for the current pixel. The lighting information is taken from a precomputed light volume.
float4 PerformWindowedIntensityRaymarch(Texture3D DataVolume, // Data Volume 
                              float3 CurPos, float MaxSteps, float StepSize, float FinalStep, // Position of ray entry to cube, number of steps, size of a step and a 0-1 value of how big the final step is compared to regular steps 
                              float3 ClippingCenter, float3 ClippingDirection, // Clipping plane position and direction of clipped away region
                              float4 WindowingParams,
                              FMaterialPixelParameters MaterialParameters)                      // Material Parameters
{
// Get camera vector in local space and multiply it by step size.
    float3 LocalCamVec = -normalize(mul(MaterialParameters.CameraVector, GetPrimitiveData(MaterialParameters.PrimitiveId).WorldToLocal)) * StepSize;
    float4 LightEnergy = 0;
    // Jitter Entry position to avoid artifacts.
    JitterEntryPos(CurPos, LocalCamVec, MaterialParameters);
   
    int i = 0;
    for (i = 0; i < MaxSteps; i++)
    {
        CurPos += LocalCamVec; // Because we jitter only "against" the direction of LocalCamVec, start marching before first sample.
	    // Any position that is clipped by the clipping plane shall be ignored.
        if (!IsCurPosClipped(saturate(CurPos), ClippingCenter, ClippingDirection))
        {
            float DataValue = DataVolume.SampleLevel(Material.Clamp_WorldGroupSettings, saturate(CurPos), 0).r;
  
            // WindowingParams.x == Center, WindowingParams.y = Width
            float TFPos = clamp(GetTransferFuncPosition(DataValue, WindowingParams.x, WindowingParams.y), 0, 1);

            return float4(TFPos, TFPos, TFPos, 1);
            break;
        }

        // Exit early if light energy (opacity) is already very high (so future steps would have almost no impact on color).
        if (LightEnergy.a > 0.95f)
        {
            LightEnergy.a = 1.0f;
            break;
        };
    }

    // Handle FinalStep (only if we went through all the previous steps and the final step size is above zero)
    if (i == MaxSteps && FinalStep > 0.0f)
    {
        CurPos += LocalCamVec * (FinalStep);
        // If the final step is clipped, don't do anything.
        if (!IsCurPosClipped(CurPos, ClippingCenter, ClippingDirection))
        {
            float DataValue = DataVolume.SampleLevel(Material.Clamp_WorldGroupSettings, CurPos, 0).r;
  
            // WindowingParams.x == Center, WindowingParams.y = Width
            float TFPos = clamp(GetTransferFuncPosition(DataValue, WindowingParams.x, WindowingParams.y), 0, 1);

            return float4(TFPos, TFPos, TFPos, 1);
        }
    }
    
    // Didn't hit anything
    return float4(0.0, 0.0, 0.0, 0.0);
}