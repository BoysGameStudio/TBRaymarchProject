//
// This shader calculates the Signed distance function of a mandelbulb fractal into a 
// volume texture.
// This is extremely time-consuming, inefficient and gives only a very rough fractal output.
//

#include "/Engine/Private/Common.ush"

// The Mandelbulb Volume we're modifying in this shader.
RWTexture3D<float> MandelbulbVolumeUAV;

// Volume dimensions.
float3 MandelbulbVolumeDimensions;

// Center of the volume will be at this world coords.
float3 Center;

// Extent of the volume in world coords.
float Extent;

// Power used to calculate the SDF.
float Power;


float Mandelbulb_SDF(float3 pos)
{
    const int Iterations = 50;
    const float Bailout = Extent;

    float3 z = pos;
    float dr = 1.0;
    float r = 0.0;
    for (int i = 0; i < Iterations; i++)
    {
        r = length(z);
        if (r > Bailout)
            break;
		
		// convert to polar coordinates
        float theta = acos(z.z / r);
        float phi = atan2(z.y, z.x);
        dr = pow(r, Power - 1.0) * Power * dr + 1.0;
		
		// scale and rotate the point
        float zr = pow(r, Power);
        theta = theta * Power;
        phi = phi * Power;
		
		// convert back to cartesian coordinates
        z = zr * float3(sin(theta) * cos(phi), sin(phi) * sin(theta), cos(theta));
        z += pos;
    }
    return 0.5 * log(r) * r / dr;
}

[numthreads(16, 16, 4)]
void MainComputeShader(uint3 PixelLoc : SV_DispatchThreadID)
{
    float3 UVW = float3(PixelLoc) / MandelbulbVolumeDimensions;
    float3 NormalizedUVW = UVW - float3(0.5, 0.5, 0.5);
    float3 Coords = Center + (NormalizedUVW * Extent);
   
    // Calculate SDF, normalize by Extent (then we'll have SDF in UVW-dimension straight for raymarching.
    MandelbulbVolumeUAV[PixelLoc] = (Mandelbulb_SDF(Coords) / Extent);
}
